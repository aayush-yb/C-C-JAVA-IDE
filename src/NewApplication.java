
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.beans.PropertyVetoException;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JViewport;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class NewApplication extends javax.swing.JFrame {

    public File s;
    private Vector v = new Vector();                                           // v stores all saved Files
    public String latestCompiled;
    public File latestCompiledFilePath;
    UndoManager undo = new UndoManager();
    public Vector compiledCFilePaths = new Vector();                   // this vector stores all compiled files 
    File filePath;
    public int flag;                                                   //flag check what user want ,it will be 1 when compile ,2 when run only , 3 when compile and run
    int flagOngoing = 0;
    //  public String cutString;                                       //stores cut string from JTextArea
    public String selectedString;                                      //stores selected  String
    CodeforcesBlog tempo;
    /**
     * Creates new form NewApplication
     */
    public NewApplication() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int height = screenSize.height;
        int width = screenSize.width;
        this.setSize((int)(width*0.8), (int)(height*0.8));

        // here's the part where i center the jframe on screen
        this.setLocationRelativeTo(null);
        flag = 1;
    }

    boolean isValid(String nameFile) {
        String g = "";                                                 // g is just a temporary string 
        int l = nameFile.lastIndexOf('.');
        if (l == -1) {
            return false;
        }
        g = nameFile.substring(l + 1, nameFile.length());
        if (g.equals("c") || g.equals("cpp") || g.equals("java") || g.equals("py")) {                 // checking validity of file
            return true;
        } else {
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new javax.swing.JPopupMenu();
        changeFont = new javax.swing.JMenuItem();
        cutButton = new javax.swing.JMenuItem();
        copyButton = new javax.swing.JMenuItem();
        pasteButton = new javax.swing.JMenuItem();
        close = new javax.swing.JPopupMenu();
        closeTab = new javax.swing.JMenuItem();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        outputAndCompileLog = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        consoleWindow = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        cursor = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        clickMe = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        undoIt = new javax.swing.JMenuItem();
        redoIt = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        compileMe = new javax.swing.JMenuItem();
        runMe = new javax.swing.JMenuItem();
        compileAndRunMe = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        closeAll = new javax.swing.JMenuItem();
        gymMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        openGeeks = new javax.swing.JMenuItem();
        openCodechef = new javax.swing.JMenuItem();
        stackOverflow = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        changeFont.setText("Change Font");
        changeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeFontActionPerformed(evt);
            }
        });
        popupMenu1.add(changeFont);

        cutButton.setText("jMenuItem4");
        cutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutButtonActionPerformed(evt);
            }
        });
        popupMenu1.add(cutButton);

        copyButton.setText("jMenuItem5");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        popupMenu1.add(copyButton);

        pasteButton.setText("jMenuItem6");
        popupMenu1.add(pasteButton);

        closeTab.setText("Close");
        closeTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTabActionPerformed(evt);
            }
        });
        close.add(closeTab);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IDE");
        setMinimumSize(new java.awt.Dimension(1000, 800));

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setText("Happy Coding!!!");

        jTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTabbedPaneMouseReleased(evt);
            }
        });

        outputAndCompileLog.setText("Compilation Log");

        consoleWindow.setEditable(false);
        consoleWindow.setColumns(20);
        consoleWindow.setRows(5);
        jScrollPane1.setViewportView(consoleWindow);

        inputArea.setColumns(20);
        inputArea.setRows(5);
        jScrollPane2.setViewportView(inputArea);

        jLabel4.setText("Input");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Mouse Moving At :");

        clickMe.setText("Search Friend");
        clickMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickMeActionPerformed(evt);
            }
        });

        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jTabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(outputAndCompileLog, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(cursor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(username, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(clickMe, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cursor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(453, 453, 453))
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputAndCompileLog, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                        .addGap(14, 14, 14)))
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(clickMe, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addComponent(username)))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cursor, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputAndCompileLog, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clickMe))))
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        jMenu1.setText("New");

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFile.setText("New File");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        jMenu1.add(newFile);

        fileMenu.add(jMenu1);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        undoIt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoIt.setText("Undo");
        undoIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoItActionPerformed(evt);
            }
        });
        editMenu.add(undoIt);

        redoIt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoIt.setText("Redo");
        redoIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoItActionPerformed(evt);
            }
        });
        editMenu.add(redoIt);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SLASH, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Comment");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem1);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        jMenu2.setText("Execute");

        compileMe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        compileMe.setText("Compile");
        compileMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileMeActionPerformed(evt);
            }
        });
        jMenu2.add(compileMe);

        runMe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, java.awt.event.InputEvent.SHIFT_MASK));
        runMe.setText("Run");
        runMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMeActionPerformed(evt);
            }
        });
        jMenu2.add(runMe);

        compileAndRunMe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        compileAndRunMe.setText("Compile & Run");
        compileAndRunMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileAndRunMeActionPerformed(evt);
            }
        });
        jMenu2.add(compileAndRunMe);

        menuBar.add(jMenu2);

        jMenu4.setText("Windows");

        closeAll.setText("Close All");
        closeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllActionPerformed(evt);
            }
        });
        jMenu4.add(closeAll);

        gymMenuItem.setText("Codeforces Gym");
        gymMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gymMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(gymMenuItem);

        menuBar.add(jMenu4);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        jMenu3.setText("Contents");

        openGeeks.setText("C++");
        openGeeks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openGeeksActionPerformed(evt);
            }
        });
        jMenu3.add(openGeeks);

        openCodechef.setText("Codechef");
        openCodechef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCodechefActionPerformed(evt);
            }
        });
        jMenu3.add(openCodechef);

        helpMenu.add(jMenu3);

        stackOverflow.setText("Stack Overflow");
        stackOverflow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackOverflowActionPerformed(evt);
            }
        });
        helpMenu.add(stackOverflow);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About Developers");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuItem2.setText("Read Codeforces Blog");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem2);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (jTabbedPane.getTabCount() >= 1) {
            int t = jTabbedPane.getTabCount();
            int dialogButton2 = JOptionPane.YES_NO_OPTION;
            JOptionPane.showConfirmDialog(null, "Safe Files Or Not?", null, dialogButton2);       //showing dialog box to save files
            if (dialogButton2 == JOptionPane.YES_OPTION) {
                for (int i = 0; i < t; i++) {
                    int dialogButton = JOptionPane.YES_NO_OPTION;
                    JOptionPane.showConfirmDialog(null, "Would you like to save your file," + jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex()) + "?", "Warning", dialogButton);

                    if (dialogButton == JOptionPane.YES_OPTION) {
                        saveMenuItemActionPerformed(evt);
                    }

                    jTabbedPane.removeTabAt(jTabbedPane.getSelectedIndex());
                    jTabbedPane.setSelectedIndex(jTabbedPane.getTabCount() - 1);
                }
            }
        }
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        ClassForCodeAreaTab newTab = new ClassForCodeAreaTab(this);
        final JTextArea editArea = newTab.codeArea;
        newTab.codeArea.addCaretListener(new CaretListener() {                    //to tell position of caret 
            public void caretUpdate(CaretEvent e) {
                int linenum = 0, columnnum = 0;
                try {
                    linenum = 1;
                    columnnum = 1;
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
                try {
                    int caretpos = editArea.getCaretPosition();
                    linenum = editArea.getLineOfOffset(caretpos);
                    columnnum = caretpos - editArea.getLineStartOffset(linenum);
                    linenum += 1;
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                updateStatus(linenum, columnnum);

            }
        });
        //  newTab.codeArea.removeCaretListener();
        updateStatus(1, 1);
        JScrollPane scroll;
        scroll = new JScrollPane(newTab.codeArea);
        scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        JViewport viewport = scroll.getViewport();                        // first extract viewport from scrollpane then extract JTextArea from Viewport
        JTextArea area = (JTextArea) viewport.getView();
        jTabbedPane.addTab("Untitled" + (jTabbedPane.getTabCount() + 1), scroll);
        jTabbedPane.setSelectedIndex(jTabbedPane.getTabCount() - 1);
        consoleWindow.setText("");
        scroll = (JScrollPane) jTabbedPane.getSelectedComponent();
        viewport = scroll.getViewport();                        // first extract viewport from scrollpane then extract JTextArea from Viewport
        area = (JTextArea) viewport.getView();
        area.getDocument().addUndoableEditListener(
                new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undo.addEdit(e.getEdit());
            }
        });
    }//GEN-LAST:event_newFileActionPerformed
    private void updateStatus(int linenumber, int columnnumber) {                 //update label of line and column number
        label.setText("Line: " + linenumber + " Column: " + columnnumber);
    }
    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed

    }//GEN-LAST:event_copyButtonActionPerformed

    private void cutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutButtonActionPerformed

    }//GEN-LAST:event_cutButtonActionPerformed

    private void changeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeFontActionPerformed

    }//GEN-LAST:event_changeFontActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if (jTabbedPane.getTabCount() != 0) {
            try {
                JScrollPane scroll = (JScrollPane) jTabbedPane.getSelectedComponent();
                JViewport viewport = scroll.getViewport();                        // first extract viewport from scrollpane then extract JTextArea from Viewport
                JTextArea area = (JTextArea) viewport.getView();

                String currentTitle = jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex());
                int found = 0;
                try {
                    Iterator<File> itr = v.iterator();
                    while (itr.hasNext()) {
                        if (itr.next().getName().equals(currentTitle)) {
                            found = 1;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (found == 0) {
                    JFileChooser chooser = new JFileChooser();
                    int chooserValue = 0;                                        //show dialog box
                    chooserValue = chooser.showSaveDialog(this);
                    try {
                        s = chooser.getSelectedFile();                      // s will be selected file
                        if (s.getName() != null) {
                            while (!isValid(s.getName())) {
                                JOptionPane.showMessageDialog(this, "Enter Valid Extension!!");
                                chooserValue = chooser.showSaveDialog(this);
                                s = chooser.getSelectedFile();
                            }
                            if (chooserValue == JFileChooser.APPROVE_OPTION) {

                                try {
                                    PrintWriter fout = new PrintWriter(s);
                                    fout.print(area.getText());
                                    fout.close();
                                    v.addElement(s);
                                    jTabbedPane.setTitleAt(jTabbedPane.getSelectedIndex(), s.getName());
                                } catch (FileNotFoundException ex) {
                                    Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    } catch (HeadlessException e) {
                    }
                } else {
                    PrintWriter fout = null;
                    try {
                        fout = new PrintWriter(s);
                        // System.out.println(area.getText());
                        fout.print(area.getText());
                        fout.close();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    fout.close();//just save matter
                }
            } catch (HeadlessException e) {                       //Thrown when code that is dependent on a keyboard, display, or mouse is called in an environment that does not support a keyboard, display, or mouse.

            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        if (jTabbedPane.getTabCount() != 0) {
            try {
                JScrollPane scroll = (JScrollPane) jTabbedPane.getSelectedComponent();
                JViewport viewport = scroll.getViewport();                        // first extract viewport from scrollpane then extract JTextArea from Viewport
                JTextArea area = (JTextArea) viewport.getView();
                JFileChooser chooser = new JFileChooser();
                int chooserValue;
                chooserValue = chooser.showSaveDialog(this);
                s = chooser.getSelectedFile();
                if (s != null) {
                    while (!isValid(s.getName())) {
                        JOptionPane.showMessageDialog(this, "Enter Valid Extension!!");
                        chooserValue = chooser.showSaveDialog(this);
                        s = chooser.getSelectedFile();
                    }
                    if (!v.contains(s)) {
                        v.addElement(s);
                        jTabbedPane.setTitleAt(jTabbedPane.getSelectedIndex(), s.getName());
                    }
                    if (chooserValue == JFileChooser.APPROVE_OPTION) {
                        try {
                            try (PrintWriter fout = new PrintWriter(s)) {
                                fout.print(area.getText());
                            }
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            } catch (HeadlessException e) {
            }
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        int chooserValue = chooser.showOpenDialog(this);
        if (chooserValue == JFileChooser.APPROVE_OPTION) {
            try {
                Scanner fin = new Scanner(chooser.getSelectedFile());
                s = chooser.getSelectedFile();
                v.add(s);
                ClassForCodeAreaTab area = new ClassForCodeAreaTab(this);
                area.codeArea.addCaretListener(new CaretListener() {
                    public void caretUpdate(CaretEvent e) {
                        JTextArea editArea = (JTextArea) e.getSource();
                        int linenum = 1;
                        int columnnum = 1;
                        try {
                            int caretpos = editArea.getCaretPosition();
                            linenum = editArea.getLineOfOffset(caretpos);
                            columnnum = caretpos - editArea.getLineStartOffset(linenum);
                            linenum += 1;
                        } catch (Exception ex) {
                        }

                        // Once we know the position of the line and the column, pass it to a helper function for updating the status bar.
                        updateStatus(linenum, columnnum);
                    }
                });
                updateStatus(1, 1);
                JScrollPane scroll = new JScrollPane(area.codeArea);
                jTabbedPane.addTab(s.getName(), scroll);
                jTabbedPane.setSelectedIndex(jTabbedPane.getTabCount() - 1);
                scroll = (JScrollPane) jTabbedPane.getSelectedComponent();
                JViewport viewport = scroll.getViewport(); // first extract viewport from scrollpane then extract JTextArea from Viewport
                area.codeArea = (JTextArea) viewport.getView();
                area.codeArea.getDocument().addUndoableEditListener(
                        new UndoableEditListener() {
                    @Override
                    public void undoableEditHappened(UndoableEditEvent e) {
                        undo.addEdit(e.getEdit());
                    }
                });
                String buffer = "";
                while (fin.hasNext()) {
                    buffer += fin.nextLine() + "\n";
                }

                area.codeArea.setText(buffer);

            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "File Not Found!");
            }
        }
        consoleWindow.setText("");
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void compileMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileMeActionPerformed
        if (flagOngoing == 0) {
            flagOngoing = 1;                                     // flagOngoing is 0 when compilation is not going on any other thread
            saveMenuItemActionPerformed(evt);
            if (s != null) {
                String fileName = s.getName();
                String filePath = s.getPath();        //s is lastest file saved
                consoleWindow.setText("");
                outputAndCompileLog.setText("Compilation Log");

                if (fileName.charAt(fileName.length() - 1) == 'c') {
                    try {
                        consoleWindow.setText("Compiling.....");
                        CompileCProgram(s, fileName);
                    } catch (IOException | InterruptedException ex) {
                        Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (fileName.charAt(fileName.length() - 1) == 'p') {
                    try {
                        consoleWindow.setText("Compiling.....");
                        CompileCplusplusProgram(fileName, filePath, s);
                    } catch (IOException | InterruptedException ex) {
                        Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (fileName.charAt(fileName.length() - 1) == 'a') {
                    consoleWindow.setText("Compiling.....");
                    CompileJAVAProgram(fileName, filePath, s);
                } else if (fileName.charAt(fileName.length() - 1) == 'y') {
                    consoleWindow.setText("Compiling......");
                    CompilePyProgram(fileName, filePath, s);
                } else {
                    consoleWindow.setText("File Format Not Supported .");
                }
            }
    }//GEN-LAST:event_compileMeActionPerformed
    }
    private void runMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMeActionPerformed
        Iterator<File> itr = null;                              //to iterate over vector
        flag = 2;
        File latest = null;
        try {
            String currentTitle = jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex());
            int found = 0;
            try {
                itr = compiledCFilePaths.iterator();
                do {
                    File p = itr.next();
                    if (p.getName().equals(currentTitle)) {

                        latest = p;
                        found = 1;
                    }
                } while (itr.hasNext());
            } catch (Exception e) {

            }
            if (found == 0) {
                int dialogButton2 = JOptionPane.YES_NO_OPTION;
                JOptionPane.showConfirmDialog(null, "Source File Not Compiled Yet!!\n        Compile Now?", null, dialogButton2);
                if (dialogButton2 == JOptionPane.YES_OPTION) {
                    consoleWindow.setText("Compiling........");
                    // System.out.println("ddddd");
                    flag = 3;
                    compileMeActionPerformed(evt);

                }
            } else {
                flag = 2;
                int yahaTak = jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex()).lastIndexOf(".");
                String temp = jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex()).substring(0, yahaTak);
                if (temp != null && jTabbedPane.getTabCount() > 0) {
                    consoleWindow.setText("");
                    outputAndCompileLog.setText("Output");

                    temp = latest.getName();
                    if (temp.endsWith("cpp")) {
                        compileAndRun runob = new compileAndRun(latest, this, "C++");
                    } else if (temp.endsWith("c")) {
                        compileAndRun runob = new compileAndRun(latest, this, "C");
                    } else if (temp.endsWith("java")) {
                        compileAndRun runob = new compileAndRun(latest, this, "JAVA");
                    }
                }

            }

        } catch (HeadlessException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_runMeActionPerformed
    public void openURL(String URL) {
        try {
            Desktop.getDesktop().browse(new URL(URL).toURI());
        } catch (MalformedURLException ex) {
            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void stackOverflowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackOverflowActionPerformed
        openURL("https://stackoverflow.com/");
    }//GEN-LAST:event_stackOverflowActionPerformed

    private void openGeeksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openGeeksActionPerformed
        openURL("http://www.geeksforgeeks.org/c-plus-plus/");
    }//GEN-LAST:event_openGeeksActionPerformed

    private void openCodechefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCodechefActionPerformed
        openURL("https://www.codechef.com/");
    }//GEN-LAST:event_openCodechefActionPerformed

    private void closeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllActionPerformed

        jTabbedPane.removeAll();
        updateStatus(0, 0);              // update Label of line & column
        cursor.setText("");
    }//GEN-LAST:event_closeAllActionPerformed

    private void jTabbedPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPaneMouseReleased
        if (jTabbedPane.getTabCount() > 0) {
            if (evt.isPopupTrigger()) {
                close.show(this, evt.getXOnScreen(), evt.getYOnScreen());
            }

            evt.consume();
        }
    }//GEN-LAST:event_jTabbedPaneMouseReleased

    private void closeTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeTabActionPerformed
        jTabbedPane.remove(jTabbedPane.getSelectedIndex());
        if (jTabbedPane.getTabCount() == 0) {
            cursor.setText("");
            label.setText("");
        }

    }//GEN-LAST:event_closeTabActionPerformed

    private void undoItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoItActionPerformed
        try {
            undo.undo();
        } catch (CannotUndoException e) {
        }
    }//GEN-LAST:event_undoItActionPerformed

    private void redoItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoItActionPerformed
        try {
            undo.redo();
        } catch (CannotRedoException e) {
        }
    }//GEN-LAST:event_redoItActionPerformed

    private void compileAndRunMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileAndRunMeActionPerformed
        flag = 3;
        compileMeActionPerformed(evt);

    }//GEN-LAST:event_compileAndRunMeActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        openURL("https://www.linkedin.com/in/aayush-chauhan-3b3116131/");
        openURL("https://l.facebook.com/l.php?u=https%3A%2F%2Fwww.linkedin.com%2Fin%2Fvijay-krishan-pandey-225a5014b%2F&h=ATM-ptT8pEr02MIWYSErHiqjfcOmaCNNC8HrwMtxIlEkV98Cj8MwdVhW9sPlyREMbgfRZXfkok_sgRgs3RCGzA9KrRvzy8vRi1WjevCPPhOCBqW92k3PgjME4WKkNrJewCeW2_ag7Q4YzA\n");
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        try {
            try {
                JScrollPane scroll = (JScrollPane) jTabbedPane.getSelectedComponent();

                JViewport viewport = scroll.getViewport();                        // first extract viewport from scrollpane then extract JTextArea from Viewport
                JTextArea area = (JTextArea) viewport.getView();
                selectedString = area.getSelectedText();
                area.replaceSelection("");
            } catch (Exception e) {
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        try {
            JScrollPane scroll = (JScrollPane) jTabbedPane.getSelectedComponent();
            JViewport viewport = scroll.getViewport();                        // first extract viewport from scrollpane then extract JTextArea from Viewport
            JTextArea area = (JTextArea) viewport.getView();
            selectedString = area.getSelectedText();

            //System.out.println(selectedString);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        try {
            JScrollPane scroll = (JScrollPane) jTabbedPane.getSelectedComponent();
            JViewport viewport = scroll.getViewport();                        // first extract viewport from scrollpane then extract JTextArea from Viewport
            JTextArea area = (JTextArea) viewport.getView();
            area.insert(selectedString, area.getCaretPosition());
        } catch (Exception e) {

        }
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        try {
            JScrollPane scroll = (JScrollPane) jTabbedPane.getSelectedComponent();
            JViewport viewport = scroll.getViewport();                        // first extract viewport from scrollpane then extract JTextArea from Viewport
            JTextArea area = (JTextArea) viewport.getView();
            area.replaceSelection("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No Text Selected!!!");
        }

    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JScrollPane scroll = (JScrollPane) jTabbedPane.getSelectedComponent();

        JViewport viewport = scroll.getViewport();                        // first extract viewport from scrollpane then extract JTextArea from Viewport
        JTextArea area = (JTextArea) viewport.getView();
        selectedString = area.getSelectedText();

        String input = "";
        input = area.getText();
        String input2 = input.substring(0, input.length());
        int pos = input2.indexOf(selectedString);
        String[] s = selectedString.split("\n");
        String ans = "";
        for (int i = 0; i < s.length; i++) {
            if (i == s.length - 1) {
                ans += "//" + s[i];
            } else {
                ans += "//" + s[i] + "\n";
            }
        }
        area.replaceSelection(ans);

        // input = findReplace.jframe.jTabbedPane.setSelectedIndex(findReplace.jframe.jTabbedPane.getSelectedIndex()).getText();
//            if (pos != -1) {
//                   
//                String s1 = input.substring(0,pos);
//                int len = selectedString.length();                  //farzi string ki length
//                String s2 = input.substring(pos + len, input.length());   // farzi string
//                String s3 = s1 + "//"+selectedString +"\n" + s2;                                                  // farzi string
//                 String temporaryString=s3;
//                area.insert(temporaryString,area.getCaretPosition());
//                
//            }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void clickMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickMeActionPerformed
        JsonContent jp = new JsonContent();
        jDesktopPane1.add(jp);
        jp.setLocation(800, 400);
        jDesktopPane1.moveToFront(jp);
        jp.show();
        try{
            jp.showmatter(username.getText());
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clickMeActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        CodeforcesBlog bg=new CodeforcesBlog(this);
        tempo=bg;
        try {
            this.addBlog();
        } catch (PropertyVetoException ex) {
            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void gymMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gymMenuItemActionPerformed
        // TODO add your handling code here:
        JInternalFrame jj = new JInternalFrame();
        jDesktopPane1.add(jj);
        jj.setBounds(100,200,500,500);
        jDesktopPane1.moveToFront(jj);
        jj.show();
    }//GEN-LAST:event_gymMenuItemActionPerformed
   
    public void addBlog() throws PropertyVetoException
    {
        jDesktopPane1.add(tempo);
        tempo.setVisible(true);
        tempo.setSelected(true);
        tempo.setLocation(700, 220);
    }
    public void CompileCProgram(File isko, String inputAreaString) throws IOException, InterruptedException {
        //CCompilationThread cProgram = new CCompilationThread("cWalaThread", this, fileName, filePath, isko,inputAreaString);
        compileAndRun car = new compileAndRun(isko, this, "C");
    }

    public void CompileCplusplusProgram(String fileName, String filePath, File isko) throws IOException, InterruptedException {
        //CPlusPlusCompilationThread cPlusplusCode = new CPlusPlusCompilationThread("cPlusPlusWalaThread", this, fileName, filePath, isko);
        compileAndRun cplusplus = new compileAndRun(isko, this, "C++");
    }

    public void CompileJAVAProgram(String fileName, String filePath, File isko) {
        compileAndRun java = new compileAndRun(isko, this, "JAVA");
    }

    public void CompilePyProgram(String fileName, String filePath, File isko) {
        compileAndRun java = new compileAndRun(isko, this, "py");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem changeFont;
    private javax.swing.JButton clickMe;
    private javax.swing.JPopupMenu close;
    private javax.swing.JMenuItem closeAll;
    private javax.swing.JMenuItem closeTab;
    private javax.swing.JMenuItem compileAndRunMe;
    private javax.swing.JMenuItem compileMe;
    public javax.swing.JTextArea consoleWindow;
    private javax.swing.JMenuItem copyButton;
    private javax.swing.JMenuItem copyMenuItem;
    public javax.swing.JLabel cursor;
    private javax.swing.JMenuItem cutButton;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem gymMenuItem;
    private javax.swing.JMenu helpMenu;
    public javax.swing.JTextArea inputArea;
    public javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JLabel label;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem openCodechef;
    private javax.swing.JMenuItem openGeeks;
    private javax.swing.JMenuItem openMenuItem;
    public javax.swing.JLabel outputAndCompileLog;
    private javax.swing.JMenuItem pasteButton;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JPopupMenu popupMenu1;
    private javax.swing.JMenuItem redoIt;
    private javax.swing.JMenuItem runMe;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem stackOverflow;
    private javax.swing.JMenuItem undoIt;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

    void addIt(TextStylesInternalFrame fontFrame) {

        jDesktopPane1.add(fontFrame);
        fontFrame.setVisible(true);

        try {
            fontFrame.setSelected(true);
        } catch (java.beans.PropertyVetoException e) {
        }
//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
